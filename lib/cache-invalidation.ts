export interface CacheInvalidationParams {
  collection: string
  documentId?: string
  action: 'create' | 'update' | 'delete'
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ –ø—É—Ç–∏ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
 */
export function getPathsToInvalidate(collection: string, documentId?: string): string[] {
  const paths: string[] = []

  switch (collection) {
    case 'cars':
      paths.push('/catalog')
      paths.push('/')
      if (documentId) {
        paths.push(`/catalog/${documentId}`)
      }
      break

    case 'reviews':
      paths.push('/reviews')
      paths.push('/')
      break

    case 'stories':
      paths.push('/')
      paths.push('/about')
      break

    case 'settings':
      // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      paths.push('/')
      paths.push('/catalog')
      paths.push('/about')
      paths.push('/contacts')
      paths.push('/credit')
      paths.push('/leasing')
      paths.push('/reviews')
      break

    case 'leads':
      // –ó–∞—è–≤–∫–∏ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      break

    default:
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –æ—á–∏—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é
      paths.push('/')
  }

  return paths
}

export async function invalidateCache(params: CacheInvalidationParams): Promise<{ success: boolean; error?: string }> {
  try {
    const apiKey = process.env.CACHE_INVALIDATION_API_KEY || process.env.NEXT_PUBLIC_CACHE_INVALIDATION_API_KEY

    if (!apiKey) {
      console.warn('[Cache Invalidation] ‚ö†Ô∏è API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CACHE_INVALIDATION_API_KEY –≤ Vercel Environment Variables')
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      return { success: false, error: 'API key not configured' }
    }

    const baseUrl = typeof window !== 'undefined'
      ? window.location.origin
      : process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'

    const paths = getPathsToInvalidate(params.collection, params.documentId)

    console.log(`[Cache Invalidation] üîÑ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è ${params.collection}${params.documentId ? `/${params.documentId}` : ''}, –ø—É—Ç–∏:`, paths)

    const response = await fetch(`${baseUrl}/api/revalidate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        collection: params.collection,
        documentId: params.documentId,
        paths,
        action: params.action
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('[Cache Invalidation] ‚ùå Failed:', errorText)
      return { success: false, error: errorText }
    }

    const result = await response.json()
    console.log('[Cache Invalidation] ‚úÖ Success:', { collection: params.collection, documentId: params.documentId, paths, result })
    return { success: true }
  } catch (error) {
    console.error('[Cache Invalidation] ‚ùå Error:', error)
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' }
  }
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–µ—Å—å –∫—ç—à —Å–∞–π—Ç–∞ (Cloudflare + Vercel + Next.js ISR)
 */
export async function purgeAllCache(): Promise<{ success: boolean; error?: string; details?: any }> {
  try {
    const apiKey = process.env.CACHE_INVALIDATION_API_KEY || process.env.NEXT_PUBLIC_CACHE_INVALIDATION_API_KEY

    if (!apiKey) {
      const errorMessage = 'API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Vercel Dashboard ‚Üí Settings ‚Üí Environment Variables –∏ –¥–æ–±–∞–≤—å—Ç–µ CACHE_INVALIDATION_API_KEY'
      console.error('[Purge All Cache] ‚ùå', errorMessage)
      return { success: false, error: errorMessage }
    }

    const baseUrl = typeof window !== 'undefined'
      ? window.location.origin
      : process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'

    console.log('[Purge All Cache] üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞...')

    const response = await fetch(`${baseUrl}/api/revalidate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        purgeAll: true
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('[Purge All Cache] ‚ùå Failed:', errorText)
      return { success: false, error: `–û—à–∏–±–∫–∞ ${response.status}: ${errorText}` }
    }

    const result = await response.json()
    console.log('[Purge All Cache] ‚úÖ Success:', result)
    return { success: true, details: result }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    console.error('[Purge All Cache] ‚ùå Error:', errorMessage)
    return {
      success: false,
      error: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`
    }
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 */
export function createCacheInvalidator(collection: string) {
  return {
    onCreate: async (documentId?: string) => {
      console.log(`[Cache Invalidator] üìù onCreate: ${collection}${documentId ? `/${documentId}` : ''}`)
      return await invalidateCache({
        collection,
        documentId,
        action: 'create'
      })
    },
    onUpdate: async (documentId?: string) => {
      console.log(`[Cache Invalidator] ‚úèÔ∏è onUpdate: ${collection}${documentId ? `/${documentId}` : ''}`)
      return await invalidateCache({
        collection,
        documentId,
        action: 'update'
      })
    },
    onDelete: async (documentId?: string) => {
      console.log(`[Cache Invalidator] üóëÔ∏è onDelete: ${collection}${documentId ? `/${documentId}` : ''}`)
      return await invalidateCache({
        collection,
        documentId,
        action: 'delete'
      })
    }
  }
}
