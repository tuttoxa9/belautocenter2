import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  console.log("–ó–ê–ü–£–°–ö: /api/test-meta-lead");

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞
    const testLeadData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –õ–∏–¥',
      phone: '+1234567890',
      email: 'test@example.com',
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID

    console.log("TELEGRAM_BOT_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω:", !!TELEGRAM_BOT_TOKEN);
    console.log("TELEGRAM_CHANNEL_ID:", TELEGRAM_CHANNEL_ID);

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHANNEL_ID) {
      console.error("–û–®–ò–ë–ö–ê: Telegram credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
      return NextResponse.json(
        { success: false, error: 'Telegram credentials not configured' },
        { status: 500 }
      )
    }

    const message = `üì± <b>–¢–ï–°–¢–û–í–´–ô –ª–∏–¥ –∏–∑ Meta (Facebook/Instagram)</b>\n\nüë§ <b>–ò–º—è:</b> ${testLeadData.name}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${testLeadData.phone}\nüìß <b>Email:</b> ${testLeadData.email}\n\n‚ö†Ô∏è <i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>`

    console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:", message);

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`

    try {
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram API...");
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHANNEL_ID,
          text: message,
          parse_mode: 'HTML',
        }),
      })

      console.log("–û—Ç–≤–µ—Ç Telegram API - —Å—Ç–∞—Ç—É—Å:", response.status);
      const responseText = await response.text();
      console.log("–û—Ç–≤–µ—Ç Telegram API - —Ç–µ–ª–æ:", responseText);

      if (response.ok) {
        console.log("–£–°–ü–ï–•: –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
        return NextResponse.json({
          success: true,
          message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram'
        })
      } else {
        console.error("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram");
        return NextResponse.json(
          { success: false, error: 'Failed to send test message to Telegram' },
          { status: 500 }
        )
      }
    } catch (telegramError) {
      console.error("–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", telegramError);
      throw telegramError;
    }
  } catch (error) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ /api/test-meta-lead:", error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    )
  }
}
