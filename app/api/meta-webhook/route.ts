import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const mode = searchParams.get('hub.mode')
    const token = searchParams.get('hub.verify_token')
    const challenge = searchParams.get('hub.challenge')

    const VERIFY_TOKEN = process.env.META_VERIFY_TOKEN

    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
      return new NextResponse(challenge, { status: 200 })
    } else {
      return new NextResponse('Forbidden', { status: 403 })
    }
  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Verification error' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  console.log("–ó–ê–ü–£–°–ö: /api/meta-webhook POST");

  try {
    const body = await request.json()
    console.log("–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Meta:", JSON.stringify(body, null, 2));

    // –ò–∑–≤–ª–µ–∫–∞–µ–º leadgen_id –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const leadgenId = body?.entry?.[0]?.changes?.[0]?.value?.leadgen_id
    console.log("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π leadgen_id:", leadgenId);

    if (!leadgenId) {
      console.error("–û–®–ò–ë–ö–ê: leadgen_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
      return NextResponse.json(
        { success: false, error: 'No lead ID found' },
        { status: 400 }
      )
    }

    const META_PAGE_ACCESS_TOKEN = process.env.META_PAGE_ACCESS_TOKEN
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

    console.log("META_PAGE_ACCESS_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω:", !!META_PAGE_ACCESS_TOKEN);
    console.log("TELEGRAM_BOT_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω:", !!TELEGRAM_BOT_TOKEN);
    console.log("TELEGRAM_CHAT_ID:", TELEGRAM_CHAT_ID);

    if (!META_PAGE_ACCESS_TOKEN) {
      console.error("–û–®–ò–ë–ö–ê: META_PAGE_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
      return NextResponse.json(
        { success: false, error: 'Meta access token not configured' },
        { status: 500 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ –æ—Ç Meta Graph API
    try {
      console.log("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞ –∏–∑ Meta Graph API...");
      const leadResponse = await fetch(
        `https://graph.facebook.com/v18.0/${leadgenId}?access_token=${META_PAGE_ACCESS_TOKEN}`
      )

      console.log("–û—Ç–≤–µ—Ç Meta Graph API - —Å—Ç–∞—Ç—É—Å:", leadResponse.status);

      if (!leadResponse.ok) {
        const errorText = await leadResponse.text();
        console.error("–û–®–ò–ë–ö–ê Meta Graph API - —Ç–µ–ª–æ:", errorText);
        return NextResponse.json(
          { success: false, error: 'Failed to fetch lead data from Meta' },
          { status: 500 }
        )
      }

      const leadData = await leadResponse.json()
      console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –æ—Ç Meta:", JSON.stringify(leadData, null, 2));

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const leadFields: Record<string, string> = {}
    if (leadData.field_data) {
      leadData.field_data.forEach((field: any) => {
        leadFields[field.name] = field.values?.[0] || ''
      })
    }

    const leadInfo = {
      leadId: leadgenId,
      name: leadFields.full_name || leadFields.name || '',
      phone: leadFields.phone_number || leadFields.phone || '',
      email: leadFields.email || '',
      createdAt: new Date().toISOString(),
      rawData: leadData,
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore —á–µ—Ä–µ–∑ REST API
    const FIREBASE_PROJECT_ID = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || 'belauto-f2b93'
    const firestoreUrl = `https://firestore.googleapis.com/v1/projects/${FIREBASE_PROJECT_ID}/databases/(default)/documents/metaLeads`

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Firestore
      const firestoreData = {
        fields: {
          leadId: { stringValue: leadInfo.leadId },
          name: { stringValue: leadInfo.name },
          phone: { stringValue: leadInfo.phone },
          email: { stringValue: leadInfo.email },
          createdAt: { stringValue: leadInfo.createdAt },
          rawData: {
            mapValue: {
              fields: {
                fieldData: { stringValue: JSON.stringify(leadData.field_data || []) }
              }
            }
          },
        }
      }

      await fetch(firestoreUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(firestoreData),
      })
    } catch (firestoreError) {
      console.error('Firestore error:', firestoreError)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      const message = `üì± <b>–ù–æ–≤—ã–π –ª–∏–¥ –∏–∑ Meta (Facebook/Instagram)</b>\n\nüë§ <b>–ò–º—è:</b> ${leadInfo.name}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${leadInfo.phone}\nüìß <b>Email:</b> ${leadInfo.email}`

      console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:", message);

      const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`

      try {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...");
        const telegramResponse = await fetch(telegramUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'HTML',
          }),
        })

        console.log("–û—Ç–≤–µ—Ç Telegram API - —Å—Ç–∞—Ç—É—Å:", telegramResponse.status);
        const telegramResponseText = await telegramResponse.text();
        console.log("–û—Ç–≤–µ—Ç Telegram API - —Ç–µ–ª–æ:", telegramResponseText);

        if (telegramResponse.ok) {
          console.log("–£–°–ü–ï–•: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
        } else {
          console.error("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram");
        }
      } catch (telegramError) {
        console.error("–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", telegramError);
      }
    } else {
      console.log("–í–ù–ò–ú–ê–ù–ò–ï: Telegram credentials –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    }

    console.log("–£–°–ü–ï–•: –õ–∏–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    return NextResponse.json({ success: true }, { status: 200 })
    } catch (metaError) {
      console.error("–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Meta Graph API:", metaError);
      return NextResponse.json(
        { success: false, error: 'Failed to fetch lead from Meta' },
        { status: 500 }
      )
    }
  } catch (error) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ /api/meta-webhook POST:", error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    )
  }
}
